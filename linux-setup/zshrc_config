# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="/home/yogibear54/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
# ZSH_THEME="frisk"
# ZSH_THEME="jispwoso"
#ZSH_THEME="kphoen"
ZSH_THEME="powerlevel10k/powerlevel10k"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# Caution: this setting can cause issues with multiline prompts (zsh 5.7.1 and newer seem to work)
# See https://github.com/ohmyzsh/ohmyzsh/issues/5765
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
  git
  zsh-autosuggestions
  tig
  sudo
  web-search
  copypath
  copyfile
  dirhistory
  fzf
)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
#
export PATH="$HOME/.config/composer/vendor/bin:$PATH"

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

bindkey '^ '      autosuggest-accept

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# Created by `pipx` on 2022-05-13 00:13:37
export PATH="$PATH:/home/yogibear54/.local/bin"

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/home/yogibear54/anaconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/home/yogibear54/anaconda3/etc/profile.d/conda.sh" ]; then
        . "/home/yogibear54/anaconda3/etc/profile.d/conda.sh"
    else
        export PATH="/home/yogibear54/anaconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

# this depends on cursor being installed
function cursor() {
    /opt/cursor/sursor.appimage "$@" &!
}

# Smart "bat": browse dirs with fzf + bat preview
# - Enter: open in Vim (default)
# - Ctrl-B: open in batcat
# - Ctrl-O: open in Cursor (if installed)
# - Ctrl-E: open in VS Code (if installed)
# - Selecting a directory with Enter navigates into it
function bat() {
  emulate -L zsh
  setopt pipefail

  # Choose terminal editor: $EDITOR first, then nvim, then vim
  local term_editor="${EDITOR:-}"
  if [[ -z "$term_editor" ]]; then
    if command -v nvim >/dev/null 2>&1; then
      term_editor="nvim"
    elif command -v vim >/dev/null 2>&1; then
      term_editor="vim"
    else
      print -u2 "No terminal editor found (nvim/vim). Set \$EDITOR."
      return 127
    fi
  fi

  # GUI editors
  local cursor_cmd="" code_cmd=""
  command -v cursor >/dev/null 2>&1 && cursor_cmd="cursor"
  command -v code   >/dev/null 2>&1 && code_cmd="code"

  # Optional flag to show directories even if a folder wasn't passed
  local show_dirs=false
  if [[ "$1" == "--show-dirs" ]]; then
    show_dirs=true
    shift
  fi

  # If a directory is given OR --show-dirs is used, launch picker
  if [[ "$show_dirs" == true || ( -n "$1" && -d "$1" ) ]]; then
    local dir="${1:-.}"
    shift

    while true; do
      local out key
      local IFS=$'\n'

      out=$(
        find "$dir" \( -type f -o -type d \) -not -path '*/.git/*' 2>/dev/null \
          | fzf --multi --height=80% --reverse \
                --header=$'Enter: open in Vim  |  Ctrl-B: open in batcat  |  Ctrl-O: Cursor  |  Ctrl-E: VS Code\nSelect a folder and press Enter to navigate.' \
                --expect=enter,ctrl-b,ctrl-o,ctrl-e \
                --preview '[[ -d {} ]] && ls -la --color=always {} || batcat --style=numbers --color=always {} 2>/dev/null || head -100 {}' \
                --preview-window=right:60%:wrap
      ) || return 1

      [[ -z "$out" ]] && return 1
      key=${out%%$'\n'*}
      local -a picks=("${(@f)${out#*$'\n'}}")

      # Enter on a single directory = drill down
      if [[ "$key" == "enter" && ${#picks[@]} -eq 1 && -d "${picks[1]}" ]]; then
        dir="${picks[1]}"
        continue
      fi

      # Act on selection
      case "$key" in
        enter)
          "$term_editor" "${picks[@]}" "$@"
          ;;
        ctrl-b)
          # Show in bat; open multiple sequentially
          batcat "${picks[@]}"
          ;;
        ctrl-o)
          if [[ -n "$cursor_cmd" ]]; then
            "$cursor_cmd" "${picks[@]}"
          else
            print -u2 "Cursor not found."; return 127
          fi
          ;;
        ctrl-e)
          if [[ -n "$code_cmd" ]]; then
            "$code_cmd" "${picks[@]}"
          else
            print -u2 "VS Code (code) not found."; return 127
          fi
          ;;
        *)
          "$term_editor" "${picks[@]}" "$@"
          ;;
      esac
      break
    done
    return $?
  fi

  # If a file is passed directly, open in Vim by default
  if [[ -n "$1" && -e "$1" ]]; then
    "$term_editor" "$@"
    return $?
  fi

  # Otherwise, just pass through to batcat (keeps original CLI behavior when piping/stdin)
  batcat "$@"
}

function suspend() {
    sudo systemctl suspend
}

function sleep() {
    xset dpms force off
}

export FZF_DEFAULT_COMMAND='fd'

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
source $ZSH/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
